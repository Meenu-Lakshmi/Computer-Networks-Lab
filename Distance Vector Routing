#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

struct Link {
    int hop, dest, wt;
};

struct Network {
    int H, L; // Number of hops and links
    struct Link *link; // Pointer to an array of links
};

int main() {
    int H, L, S, i, j;
    
    printf("Distance Vector Routing using Bellman Ford Algorithm:\n");
    printf("Enter number of hops: ");
    scanf("%d", &H);

    printf("Enter number of links: ");
    scanf("%d", &L);

    struct Network *n = (struct Network *)malloc(sizeof(struct Network));

    // Create network
    n->H = H;
    n->L = L;
    n->link = (struct Link *)malloc(n->L * sizeof(struct Link));

    // Input source, destination, and weight
    for (i = 0; i < L; i++) {
        printf("\nLink %d: enter source, destination and weight: \n", i + 1);
        scanf("%d", &n->link[i].hop);
        scanf("%d", &n->link[i].dest);
        scanf("%d", &n->link[i].wt);
    }

    // Initialize distances to INT_MAX
    int *dist = (int *)malloc(H * sizeof(int));
    for (i = 0; i < H; i++) {
        dist[i] = INT_MAX;
    }
    
    // Set distance from source to itself
    printf("Enter source node (0 to %d): ", H - 1);
    scanf("%d", &S);
    dist[S] = 0;

    // Relaxation process
    for (i = 1; i < H; i++) {
        for (j = 0; j < L; j++) {
            int u = n->link[j].hop;
            int v = n->link[j].dest;
            int wt = n->link[j].wt;

            if (dist[u] != INT_MAX && dist[u] + wt < dist[v]) {
                dist[v] = dist[u] + wt;
            }
        }
    }

    // Negative cycle detection
    for (i = 0; i < L; i++) {
        int u = n->link[i].hop;
        int v = n->link[i].dest;
        int wt = n->link[i].wt;

        if (dist[u] != INT_MAX && dist[u] + wt < dist[v]) {
            printf("Network contains negative weight cycle\n");
        }
    }

    // Output results
    printf("\nHop\tDistance from source\n");
    for (i = 0; i < H; i++) {
        printf("%d \t %d\n", i, dist[i] == INT_MAX ? -1 : dist[i]);
    }

    // Free allocated memory
    free(n->link);
    free(n);
    free(dist);

    return 0;
}
